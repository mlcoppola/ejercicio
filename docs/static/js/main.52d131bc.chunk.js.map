{"version":3,"sources":["types/types.js","auth/authReducer.js","components/spinner/Spinner.js","routers/AuthRouter.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/AppRouter.js","WoloxApp.js","index.js","auth/AuthContext.js"],"names":["types","login","logout","authReducer","state","action","type","payload","logged","Spinner","className","LoginScreen","lazy","AuthRouter","fallback","exact","path","component","to","PrivateRoute","isAuthenticated","Component","rest","props","PublicRoute","WoloxScreen","Landing","AppRouter","user","useContext","AuthContext","init","JSON","parse","localStorage","getItem","WoloxApp","useReducer","dispatch","useEffect","saveSession","setItem","stringify","clear","Provider","value","ReactDOM","render","document","getElementById","createContext"],"mappings":"uGAEA,kCAAO,IAAMA,EAAQ,CACjBC,MAAO,eACPC,OAAQ,kB,oKCFCC,EAAc,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC/C,OAAQA,EAAOC,MACX,KAAKN,IAAMC,MACP,OAAO,2BACAI,EAAOE,SADd,IAEIC,QAAQ,IAEhB,KAAKR,IAAME,OACP,MAAO,CACHM,QAAQ,GAGhB,QACI,OAAOJ,I,cCbNK,EAAU,WACnB,OACI,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,mBAAf,cACA,uBAAGA,UAAU,kBAAb,iBCFNC,EAAeC,gBAAK,kBAAM,gCAEnBC,EAAa,WACtB,OACI,yBAAKH,UAAU,cACX,yBAAKA,UAAU,uBACX,kBAAC,WAAD,CAAUI,SAAW,kBAAC,EAAD,OACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,OAAK,EACLC,KAAK,cACLC,UAAWN,IAGf,kBAAC,IAAD,CAAUO,GAAG,qB,QCbxBC,EAAe,SAAC,GAItB,IAHHC,EAGE,EAHFA,gBACWC,EAET,EAFFJ,UACGK,EACD,+CACF,OACI,kBAAC,IAAD,iBAAWA,EAAX,CACIL,UAAW,SAACM,GAAD,OACNH,EACM,kBAACC,EAAcE,GACf,kBAAC,IAAD,CAAUL,GAAG,qBCVvBM,EAAc,SAAC,GAIrB,IAHHJ,EAGE,EAHFA,gBACWC,EAET,EAFFJ,UACGK,EACD,+CACF,OACI,kBAAC,IAAD,iBAAWA,EAAX,CACIL,UAAW,SAACM,GAAD,OACLH,EAEK,kBAAC,IAAD,CAAUF,GAAG,aADb,kBAACG,EAAcE,QCAhCE,EAAcb,gBAAK,kBAAM,gCACzBc,EAAUd,gBAAK,kBAAM,gCAEde,EAAY,WAAO,IAEpBC,EAASC,qBAAWC,KAApBF,KAER,OACI,kBAAC,gBAAD,KACI,6BACI,kBAAC,WAAD,CAAUd,SAAW,kBAAC,EAAD,OACjB,kBAAC,IAAD,KACI,kBAAC,EAAD,CACIE,KAAK,QACLC,UAAWJ,EACXO,gBAAiBQ,EAAKpB,SAG1B,kBAAC,EAAD,CACIQ,KAAK,WACLC,UAAWQ,EACXL,gBAAiBQ,EAAKpB,SAG1B,kBAAC,EAAD,CACIO,OAAK,EACLC,KAAK,IACLC,UAAWS,EACXN,gBAAiBQ,EAAKpB,SAG1B,kBAAC,IAAD,CAAUU,GAAG,qBCxC/Ba,EAAO,WACT,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,CAAE3B,QAAQ,IAGpD4B,EAAW,WAAO,IAAD,EAEDC,qBAAWlC,EAAa,GAAI4B,GAF3B,mBAEnBH,EAFmB,KAEbU,EAFa,KAY1B,OARAC,qBAAU,WACFX,EAAKY,YACLN,aAAaO,QAAQ,OAAQT,KAAKU,UAAUd,IAE5CM,aAAaS,UAElB,CAACf,IAGA,kBAACE,EAAA,EAAYc,SAAb,CAAsBC,MAAO,CAAEjB,OAAMU,aACjC,kBAAC,EAAD,Q,MChBZQ,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U,+BCT1B,6CAEanB,EAAcoB,4B","file":"static/js/main.52d131bc.chunk.js","sourcesContent":["\r\n\r\nexport const types = {\r\n    login: '[auth] login',\r\n    logout: '[auth] logout'\r\n}","import { types } from '../types/types';\r\n\r\nexport const authReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case types.login:\r\n            return {\r\n                ...action.payload,\r\n                logged: true\r\n            }\r\n        case types.logout:\r\n            return {\r\n                logged: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const Spinner = () => {\r\n    return (\r\n        <div className=\"spinner__container\">\r\n            <div className=\"spinner__loader\">Loading...</div>\r\n            <p className=\"spinner__texto\">Cargando...</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { lazy, Suspense } from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { Spinner } from '../components/spinner/Spinner';\r\n\r\nconst LoginScreen  = lazy(() => import('../components/login/LoginScreen'));\r\n\r\nexport const AuthRouter = () => {\r\n    return (\r\n        <div className=\"auth__main\">\r\n            <div className=\"auth__box-container\">\r\n                <Suspense fallback={ <Spinner /> }>\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path=\"/auth/login\"\r\n                            component={LoginScreen}\r\n                        />\r\n\r\n                        <Redirect to=\"/auth/login\" />\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest}\r\n            component={(props) => (\r\n                (isAuthenticated)\r\n                    ? (<Component {...props} />)\r\n                    : (<Redirect to=\"/auth/login\" />)\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.any.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest}\r\n            component={(props) => (\r\n                (!isAuthenticated)\r\n                    ? (<Component {...props} />)\r\n                    : (<Redirect to=\"/listado\" />)\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.any.isRequired\r\n}\r\n","import React, { lazy, Suspense, useContext } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect\r\n} from 'react-router-dom';\r\nimport { AuthContext } from '../auth/AuthContext';\r\n\r\n// import { Landing } from '../components/landing/Landing';\r\nimport { Spinner } from '../components/spinner/Spinner';\r\nimport { AuthRouter } from './AuthRouter';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { PublicRoute } from './PublicRoute';\r\n\r\nconst WoloxScreen = lazy(() => import('../components/wolox/WoloxScreen'));\r\nconst Landing = lazy(() => import('../components/landing/Landing'));\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const { user } = useContext(AuthContext);\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Suspense fallback={ <Spinner /> }>\r\n                    <Switch>\r\n                        <PublicRoute\r\n                            path=\"/auth\"\r\n                            component={AuthRouter}\r\n                            isAuthenticated={user.logged}\r\n                        />\r\n\r\n                        <PrivateRoute\r\n                            path=\"/listado\"\r\n                            component={WoloxScreen}\r\n                            isAuthenticated={user.logged}\r\n                        />\r\n\r\n                        <PublicRoute\r\n                            exact\r\n                            path=\"/\"\r\n                            component={Landing}\r\n                            isAuthenticated={user.logged}\r\n                        />\r\n\r\n                        <Redirect to=\"/auth/login\" />\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","import React, { useEffect, useReducer } from 'react';\r\nimport { AuthContext } from './auth/AuthContext';\r\nimport { authReducer } from './auth/authReducer';\r\nimport { AppRouter } from './routers/AppRouter';\r\n\r\nconst init = () => {\r\n    return JSON.parse(localStorage.getItem('user')) || { logged: false };\r\n}\r\n\r\nexport const WoloxApp = () => {\r\n\r\n    const [user, dispatch] = useReducer(authReducer, {}, init);\r\n\r\n    useEffect(() => {\r\n        if (user.saveSession) {\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n        } else {\r\n            localStorage.clear();\r\n        }\r\n    }, [user])\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, dispatch }}>\r\n            <AppRouter />\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { WoloxApp } from './WoloxApp';\r\n\r\nimport './styles/styles.scss';\r\n\r\nReactDOM.render(\r\n    <WoloxApp />,\r\n  document.getElementById('root')\r\n);","import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext();"],"sourceRoot":""}