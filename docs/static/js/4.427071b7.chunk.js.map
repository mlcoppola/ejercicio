{"version":3,"sources":["../node_modules/email-validator/index.js","components/login/LoginScreen.js","hooks/useForm.js"],"names":["tester","exports","validate","email","length","test","parts","split","some","part","LoginScreen","history","dispatch","useContext","AuthContext","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","useForm","password","formValues","checked","setChecked","errorMsg","setErrorMsg","className","onSubmit","e","preventDefault","validator","trim","data","fetch","method","body","JSON","stringify","headers","then","res","json","catch","error","console","type","types","login","payload","saveSession","replace","htmlFor","autoComplete","onChange","id","to"],"mappings":"uGAEA,IAAIA,EAAS,iIAKbC,EAAQC,SAAW,SAASC,GAE3B,IAAKA,EACJ,OAAO,EAER,GAAGA,EAAMC,OAAO,IACf,OAAO,EAGR,IADYJ,EAAOK,KAAKF,GAEvB,OAAO,EAGR,IAAIG,EAAQH,EAAMI,MAAM,KACxB,QAAGD,EAAM,GAAGF,OAAO,MAGDE,EAAM,GAAGC,MAAM,KAClBC,MAAK,SAASC,GAAQ,OAAOA,EAAKL,OAAO,Q,kKCjB1C,SAASM,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QAE1BC,EAAaC,qBAAWC,KAAxBF,SAFqC,ECN1B,WAAwB,IAAvBG,EAAsB,uDAAP,GAAO,EAEdC,mBAASD,GAFK,mBAEnCE,EAFmC,KAE3BC,EAF2B,KAIpCC,EAAQ,WACVD,EAAUH,IAIRK,EAAoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEzBH,EAAU,2BACHD,GADE,kBAEJI,EAAOC,KAAOD,EAAOE,UAK9B,MAAO,CAACN,EAAQG,EAAmBD,GDRKK,CAAQ,CAC5CrB,MAAO,GACPsB,SAAU,KAN+B,mBAItCC,EAJsC,KAI1BN,EAJ0B,OASfJ,oBAAS,GATM,mBAStCW,EATsC,KAS7BC,EAT6B,OAUbZ,mBAAS,IAVI,mBAUtCa,EAVsC,KAU5BC,EAV4B,KAgBrC3B,EAAoBuB,EAApBvB,MAAOsB,EAAaC,EAAbD,SAyCf,OACI,yBAAKM,UAAU,qCACX,wBAAIA,UAAU,eAAd,SACA,0BAAMC,SA1CM,SAACC,GAGjB,GAFAA,EAAEC,iBAEGC,IAAUjC,SAASC,GAKxB,GAAIsB,EAASW,OAAOhC,OAAS,EACzB0B,EAAY,+DADhB,CAKA,IACMO,EAAO,CAAElC,QAAOsB,YAEtBa,MAHY,qEAGD,CACPC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,SAAUA,MACvCJ,MAAK,WACFhC,EAAS,CACLsC,KAAMC,IAAMC,MACZC,QAAS,CACL/B,KAAMnB,EACNmD,YAAa3B,KAIrBhB,EAAQ4C,QAAQ,oBA7BpBzB,EAAY,sBAsCiBC,UAAU,cAE/BF,GACA,yBAAKE,UAAU,qBAAqBF,GAExC,yBAAKE,UAAU,aACX,2BAAOyB,QAAQ,SAAf,SACA,2BACIN,KAAK,OACL5B,KAAK,QACLS,UAAU,cACV0B,aAAa,MACblC,MAAOpB,EACPuD,SAAUtC,KAIlB,yBAAKW,UAAU,aACX,2BAAOyB,QAAQ,YAAf,YACA,2BACIN,KAAK,WACL5B,KAAK,WACLS,UAAU,cACVR,MAAOE,EACPiC,SAAUtC,KAIlB,4BACI8B,KAAK,SACLnB,UAAU,gBAFd,YAOA,2BAAOyB,QAAQ,WAAWzB,UAAU,kBAApC,qBAEI,2BACImB,KAAK,WACL5B,KAAK,cACLoC,SAxFG,SAACzB,GACpBL,EAAWK,EAAEZ,OAAOM,UAwFJgC,GAAG,cAIX,kBAAC,OAAD,CAAMC,GAAG,IAAI7B,UAAU,yBAAvB","file":"static/js/4.427071b7.chunk.js","sourcesContent":["\"use strict\";\r\n\r\nvar tester = /^[-!#$%&'*+\\/0-9=?A-Z^_a-z{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\r\n// Thanks to:\r\n// http://fightingforalostcause.net/misc/2006/compare-email-regex.php\r\n// http://thedailywtf.com/Articles/Validating_Email_Addresses.aspx\r\n// http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/201378#201378\r\nexports.validate = function(email)\r\n{\r\n\tif (!email)\r\n\t\treturn false;\r\n\t\t\r\n\tif(email.length>254)\r\n\t\treturn false;\r\n\r\n\tvar valid = tester.test(email);\r\n\tif(!valid)\r\n\t\treturn false;\r\n\r\n\t// Further checking of some things regex can't handle\r\n\tvar parts = email.split(\"@\");\r\n\tif(parts[0].length>64)\r\n\t\treturn false;\r\n\r\n\tvar domainParts = parts[1].split(\".\");\r\n\tif(domainParts.some(function(part) { return part.length>63; }))\r\n\t\treturn false;\r\n\r\n\treturn true;\r\n}","import React, { useContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport validator from 'email-validator';\r\nimport { AuthContext } from '../../auth/AuthContext';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { types } from '../../types/types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LoginScreen({ history }) {\r\n\r\n    const { dispatch } = useContext(AuthContext);\r\n\r\n    const [formValues, handleInputChange] = useForm({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const [checked, setChecked] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n\r\n    const handleCheckbox = (e) => {\r\n        setChecked(e.target.checked);\r\n    }\r\n\r\n    const { email, password } = formValues;\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!validator.validate(email)) {\r\n            setErrorMsg('Email inválido');\r\n            return;\r\n        }\r\n\r\n        if (password.trim().length < 2) {\r\n            setErrorMsg('Debes ingresar una contraseña con más de 2 letras');\r\n            return;\r\n        }\r\n\r\n        const url = 'http://private-8e8921-woloxfrontendinverview.apiary-mock.com/login';\r\n        const data = { email, password };\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .catch(error => console.error('Error:', error))\r\n            .then(() => {\r\n                dispatch({\r\n                    type: types.login,\r\n                    payload: {\r\n                        name: email,\r\n                        saveSession: checked\r\n                    }\r\n                });\r\n\r\n                history.replace('/listado');\r\n            });\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"animate__animated animate__fadeIn\">\r\n            <h3 className=\"auth__title\">Login</h3>\r\n            <form onSubmit={handleLogin} className=\"auth__form\">\r\n                {\r\n                    errorMsg &&\r\n                    <div className=\"auth__alert-error\">{errorMsg}</div>\r\n                }\r\n                <div className=\"auth__row\">\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"email\"\r\n                        className=\"auth__input\"\r\n                        autoComplete=\"off\"\r\n                        value={email}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"auth__row\">\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        className=\"auth__input\"\r\n                        value={password}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"auth__button\"\r\n                >\r\n                    Ingresar\r\n                </button>\r\n\r\n                <label htmlFor=\"mantener\" className=\"auth__mantener\">\r\n                    Mantener conectado\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name=\"saveSession\"\r\n                        onChange={handleCheckbox}\r\n                        id=\"mantener\"\r\n                    />\r\n                </label>\r\n\r\n                <Link to=\"/\" className=\"auth__mantener enlace\">Ir a la landing</Link>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nLoginScreen.propTypes = {\r\n    history: PropTypes.object.isRequired\r\n}","import { useState } from 'react';\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    }\r\n\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value\r\n        });\r\n\r\n    }\r\n\r\n    return [values, handleInputChange, reset];\r\n\r\n}"],"sourceRoot":""}